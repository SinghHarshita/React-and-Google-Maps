{"version":3,"sources":["components/marker.js","App.js","serviceWorker.js","index.js"],"names":["cities","name","position","lat","lng","GoogleMaps","props","renderMarkers","map","maps","marker","Marker","state","mapCenter","title","markerText","setState","changeMapCenter","e","index","target","value","forceUpdate","setCenter","setMap","console","log","bind","active","className","bootstrapURLKeys","key","process","defaultCenter","this","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","onChange","city","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9ea3f576.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nconst cities = [\r\n    {name: 'Mumbai, India', position: {lat: 19.07283,lng: 72.88261}},\r\n    {name: 'Bhubaneshwar, India', position: {lat: 20.296059,lng: 85.824539}},\r\n    {name: 'Lucknow, India', position: {lat: 26.850000,lng: 80.949997}},\r\n    {name: 'Delhi, India', position: {lat: 28.610001,lng: 77.230003}},\r\n    {name: 'Amaravati, India', position: {lat: 14.685564,lng: 77.595406}},\r\n    {name: 'Itanagar, India', position: {lat: 27.1,lng: 93.62}},\r\n    {name: 'Guwahati, India', position: {lat: 26.148043,lng: 91.731377}},\r\n    {name: 'Patna, India', position: {lat: 25.612677,lng: 85.158875}},\r\n    {name: 'Chandigarh, India', position: {lat: 30.741482,lng: 76.768066}},\r\n    {name: 'Rome, Italy', position: {lat: 41.890251,lng: 12.492373}},\r\n    {name: 'London, UK', position: {lat: 51.509865,lng: -.118092}},\r\n    {name: 'Madrid, Spain', position: {lat: 40.416775,lng: -3.703790}},\r\n    {name: 'Athens, Greece', position: {lat: 37.983810,lng: 23.727539}},\r\n    {name: 'Tokyo, Japan', position: {lat: 35.652832,lng: 139.839478}},\r\n    // {name: 'Madrid, Spain', position: {lat: 40.416775,lng: -3.703790}},\r\n]\r\n\r\nclass GoogleMaps extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n\r\n        this.renderMarkers = this.renderMarkers.bind(this);\r\n        this.changeMapCenter = this.changeMapCenter.bind(this);\r\n\r\n        this.state = {\r\n            active: 0,\r\n            mapCenter: cities[0]['position'],\r\n            markerText : cities[0]['name'],\r\n        };\r\n    }\r\n\r\n    renderMarkers = (map, maps) => {\r\n        let marker = new maps.Marker({\r\n            position: this.state.mapCenter,\r\n            map,\r\n            title: this.state.markerText\r\n        });\r\n\r\n        this.setState({\r\n            map: map,\r\n            maps: maps,\r\n            marker: marker\r\n        })\r\n\r\n        return marker;\r\n    };\r\n\r\n    changeMapCenter = (e) => {\r\n        const index = e.target.value\r\n        this.state.mapCenter = cities[index]['position']\r\n        this.state.markerText = cities[index]['name']\r\n        this.forceUpdate();\r\n\r\n        this.state.map.setCenter(this.state.mapCenter)\r\n        this.state.marker.setMap(null)\r\n        this.renderMarkers(this.state.map, this.state.maps)\r\n        console.log(this.state.marker.title)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"map\">\r\n                <GoogleMapReact\r\n                    bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY }}\r\n                    defaultCenter={this.state.mapCenter}\r\n                    defaultZoom={10}\r\n                    yesIWantToUseGoogleMapApiInternals\r\n                    onGoogleApiLoaded={({ map, maps }) => this.renderMarkers(map, maps)}\r\n                >\r\n                </GoogleMapReact>\r\n\r\n                <br />\r\n                <form className=\"form\">\r\n                    <select onChange={this.changeMapCenter}>\r\n                        {cities.map((city, index) => {\r\n                            return (<option value={index}>{city.name}</option>)\r\n                        })}\r\n                    </select>\r\n                    {/* <button type=\"submit\" onClick={() => this.changeMapCenter(1)}>Change Center</button> */}\r\n                </form>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// const GoogleMaps = ({ latitude, longitude, mapText }) => {\r\n//     const renderMarkers = (map, maps) => {\r\n//         let marker = new maps.Marker({\r\n//             position: { lat: latitude,\r\n//             lng: longitude },\r\n//             map,\r\n//             title: mapText\r\n//         });\r\n//         return marker;\r\n//     };\r\n   \r\n//     return (\r\n//         <div style={{ height: '50vh', width: '100%' }}>\r\n//             <GoogleMapReact\r\n//                 bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY }}\r\n//                 defaultCenter={{ lat: latitude,\r\n//                     lng: longitude }}\r\n//                 defaultZoom={16}\r\n//                 yesIWantToUseGoogleMapApiInternals\r\n//                 onGoogleApiLoaded={({ map, maps }) => renderMarkers(map, maps)}\r\n//             >\r\n//             </GoogleMapReact>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\nexport default GoogleMaps;\r\n   ","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport MapComponent from './components/marker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MapComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}